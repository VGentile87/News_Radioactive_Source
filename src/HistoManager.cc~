#include "HistoManager.hh"
#include "G4UnitsTable.hh"
#include "G4SystemOfUnits.hh"

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

HistoManager::HistoManager()
{
  fFileName[0] = "AnaEx01";
  fFactoryOn = false;
  
  // histograms
  for (G4int k=0; k<MaxHisto; k++) {
    fHistId[k] = 0;
    fHistPt[k] = 0;    
  }
  // ntuple
  for (G4int k=0; k<MaxNtCol; k++) {
    fNtColId[k] = 0;
  }  
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

HistoManager::~HistoManager()
{ }

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void HistoManager::book()
{
  // Create or get analysis manager
  // The choice of analysis technology is done via selection of a namespace
  // in HistoManager.hh
  G4AnalysisManager* analysisManager = G4AnalysisManager::Instance();
  analysisManager->SetVerboseLevel(2);
  G4String extension = analysisManager->GetFileType();
  fFileName[1] = fFileName[0] + "." + extension;
      
  // Create directories 
  analysisManager->SetHistoDirectoryName("histo");
  analysisManager->SetNtupleDirectoryName("ntuple");
    
  // Open an output file
  //
  G4bool fileOpen = analysisManager->OpenFile(fFileName[0]);
  if (!fileOpen) {
    G4cout << "\n---> HistoManager::book(): cannot open " << fFileName[1] 
           << G4endl;
    return;
  }
  
  // create selected histograms
  //
  analysisManager->SetFirstHistoId(1);
  analysisManager->SetFirstNtupleId(1);

  fHistId[1] = analysisManager->CreateH1("1","Edep in absorber (MeV)",
                                              100, 0., 800*MeV);
  fHistPt[1] = analysisManager->GetH1(fHistId[1]);
                                           
  fHistId[2] = analysisManager->CreateH1("2","Edep in gap (MeV)",
                                              100, 0., 100*MeV);
  fHistPt[2] = analysisManager->GetH1(fHistId[2]);
                                           
  fHistId[3] = analysisManager->CreateH1("3","trackL in absorber (mm)",
                                              100, 0., 1*m);
  fHistPt[3] = analysisManager->GetH1(fHistId[3]);
                                           
  fHistId[4] = analysisManager->CreateH1("4","trackL in gap (mm)",
                                              100, 0., 50*cm);
  fHistPt[4] = analysisManager->GetH1(fHistId[4]);
                                  
  // Create 1st ntuple (id = 1)
  //    
  analysisManager->CreateNtuple("101", "Edep");
  fNtColId[0] = analysisManager->CreateNtupleDColumn("Eabs");
  fNtColId[1] = analysisManager->CreateNtupleDColumn("Egap");
  analysisManager->FinishNtuple();

  // Create 2nd ntuple (id = 2)
  //    
  analysisManager->CreateNtuple("102", "TrackL");
  fNtColId[2] = analysisManager->CreateNtupleDColumn("Labs");
  fNtColId[3] = analysisManager->CreateNtupleDColumn("Lgap");
  analysisManager->FinishNtuple();

  // Create 3rd ntuple (id = 3)
  //    
  analysisManager->CreateNtuple("103", "PrimaryInfo");
  fNtColId[4] = analysisManager->CreateNtupleDColumn("PDG");
  fNtColId[5] = analysisManager->CreateNtupleDColumn("x1");
  fNtColId[6] = analysisManager->CreateNtupleDColumn("y1");
  fNtColId[7] = analysisManager->CreateNtupleDColumn("z1");
  fNtColId[8] = analysisManager->CreateNtupleDColumn("px1");
  fNtColId[9] = analysisManager->CreateNtupleDColumn("py1");
  fNtColId[10] = analysisManager->CreateNtupleDColumn("pz1");
  analysisManager->FinishNtuple();

  analysisManager->CreateNtuple("104", "SecondaryInfo");
  fNtColId[11] = analysisManager->CreateNtupleDColumn("PDG");
  fNtColId[12] = analysisManager->CreateNtupleDColumn("x2");
  fNtColId[13] = analysisManager->CreateNtupleDColumn("y2");
  fNtColId[14] = analysisManager->CreateNtupleDColumn("z2");
  fNtColId[15] = analysisManager->CreateNtupleDColumn("px2");
  fNtColId[16] = analysisManager->CreateNtupleDColumn("py2");
  fNtColId[17] = analysisManager->CreateNtupleDColumn("pz2");
  analysisManager->FinishNtuple();
  
  fFactoryOn = true;       
  G4cout << "\n----> Histogram Tree is opened in " << fFileName[1] << G4endl;
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void HistoManager::save()
{
  if (fFactoryOn) {
    G4AnalysisManager* analysisManager = G4AnalysisManager::Instance();    
    analysisManager->Write();
    analysisManager->CloseFile();  
    G4cout << "\n----> Histogram Tree is saved in " << fFileName[1] << G4endl;
      
    delete G4AnalysisManager::Instance();
    fFactoryOn = false;
  }                    
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void HistoManager::FillHisto(G4int ih, G4double xbin, G4double weight)
{
  if (ih > MaxHisto) {
    G4cout << "---> warning from HistoManager::FillHisto() : histo " << ih
           << "does note xist; xbin= " << xbin << " w= " << weight << G4endl;
    return;
  }

  if (fHistPt[ih]) fHistPt[ih]->fill(xbin, weight);
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void HistoManager::Normalize(G4int ih, G4double fac)
{
  if (ih >= MaxHisto) {
    G4cout << "---> warning from HistoManager::Normalize() : histo " << ih
           << "  fac= " << fac << G4endl;
    return;
  }

  if (fHistPt[ih]) fHistPt[ih]->scale(fac);
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

// G4bool FillNtupleIColumn(G4int ntupleId, G4int columnId, G4int value);

void HistoManager::FillNtuple(G4int ntupleId, G4int columnId, G4double value, G4int NewRow)
{ 
  G4AnalysisManager* analysisManager = G4AnalysisManager::Instance();
  analysisManager->FillNtupleDColumn(ntupleId,fNtColId[columnId],value);
  if(NewRow == 1)
    analysisManager->AddNtupleRow(ntupleId);  
}
 //  // Fill 1st ntuple ( id = 1)
  
//   analysisManager->FillNtupleDColumn(1,fNtColId[0], energyAbs);
//   analysisManager->FillNtupleDColumn(1,fNtColId[1], energyGap);
//   analysisManager->AddNtupleRow(1);  
//   // Fill 2nd ntuple ( id = 2)
//   analysisManager->FillNtupleDColumn(2,fNtColId[2], trackLAbs);
//   analysisManager->FillNtupleDColumn(2,fNtColId[3], trackLGap);
//   analysisManager->AddNtupleRow(2);
// }


//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void HistoManager::PrintStatistic()
{
  if(fFactoryOn) {
    G4cout << "\n ----> print histograms statistic \n" << G4endl;
    
    G4cout 
       << " EAbs : mean = " << G4BestUnit(fHistPt[1]->mean(), "Energy") 
               << " rms = " << G4BestUnit(fHistPt[1]->rms(),  "Energy") 
               << G4endl;
    G4cout                
       << " EGap : mean = " << G4BestUnit(fHistPt[2]->mean(), "Energy") 
               << " rms = " << G4BestUnit(fHistPt[2]->rms(),  "Energy") 
               << G4endl;
    G4cout 
       << " LAbs : mean = " << G4BestUnit(fHistPt[3]->mean(), "Length") 
               << " rms = " << G4BestUnit(fHistPt[3]->rms(),  "Length") 
               << G4endl;
    G4cout 
       << " LGap : mean = " << G4BestUnit(fHistPt[4]->mean(), "Length") 
               << " rms = " << G4BestUnit(fHistPt[4]->rms(),  "Length") 
               << G4endl;
  }
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......


