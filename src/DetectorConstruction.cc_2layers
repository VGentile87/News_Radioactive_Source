#include "DetectorConstruction.hh"
#include "DetectorMessenger.hh"

#include "G4Material.hh"
#include "G4NistManager.hh"

#include "G4Box.hh"
#include "G4Tubs.hh"
#include "G4LogicalVolume.hh"
#include "G4PVPlacement.hh"
#include "G4PVReplica.hh"

#include "G4GeometryManager.hh"
#include "G4PhysicalVolumeStore.hh"
#include "G4LogicalVolumeStore.hh"
#include "G4SolidStore.hh"

#include "G4VisAttributes.hh"
#include "G4Colour.hh"
#include "G4SystemOfUnits.hh"
#include "G4RunManager.hh"
#include "G4PhysicalConstants.hh"

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

DetectorConstruction::DetectorConstruction()
:G4VUserDetectorConstruction(),
 fDefaultMaterial(0), fCylMaterial(0),
 fSolidWorld(0),fLogicWorld(0),fPhysiWorld(0),
 // fSolidCyl(0),fLogicCyl(0),fPhysiCyl(0),
 fDetectorMessenger(0)
{

  // materials
  DefineMaterials();
  
  // create commands for interactive definition of the calorimeter
  fDetectorMessenger = new DetectorMessenger(this);
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

DetectorConstruction::~DetectorConstruction()
{ delete fDetectorMessenger;}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

G4VPhysicalVolume* DetectorConstruction::Construct()
{
  return ConstructDetector();
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void DetectorConstruction::DefineMaterials()
{ 

  G4NistManager* nistManager = G4NistManager::Instance();
  nistManager->SetVerbose(1);
  // nistManager->FindOrBuildMaterial("G4_SILICON_DIOXIDE");
  
  G4double fractionmass;
  G4String name, symbol; 
  G4int ncomponents, natoms;
  
  // Material Properties
  G4double a;  // mass of a mole;
  G4double z;  // z=mean number of protons;  
  G4double density; 
  
 //G4Material* Plastic = 
 // nistManager->FindOrBuildMaterial("G4_POLYCARBONATE");
 // density = 11.35*g/cm3;
 // a = 207.20*g/mole;
  
  a = 126.9*g/mole;
  G4Element* elI  = new G4Element(name="Iodium", symbol="I", z=53., a);
  
  a = 107.9*g/mole;
  G4Element* elAg  = new G4Element(name="Silver", symbol="Ag", z=47., a);

  a = 79.9*g/mole;
  G4Element* elBr  = new G4Element(name="Bromine", symbol="Br", z=35., a);
  
  a = 32.1*g/mole;
  G4Element* elS  = new G4Element(name="Sulphur", symbol="S", z=16., a);
  
  a = 16.00*g/mole;
  G4Element* elO  = new G4Element(name="Oxygen", symbol="O", z=8., a);

  a = 14.01*g/mole;
  G4Element* elN  = new G4Element(name="Nitrogen", symbol="N", z= 7., a);
  
  a = 12.00*g/mole;
  G4Element* elC  = new G4Element(name="Carbon", symbol="C", z= 6., a);

  a = 1.01*g/mole;
  G4Element* elH  = new G4Element(name="Hydrogen",symbol="H" , z= 1., a);
  
  density = 3.43*g/cm3; // Banana
  
  G4Material* Emulsion = new G4Material(name="Emulsion", density, ncomponents=8);
  // Banana
  Emulsion->AddElement(elAg,fractionmass=0.44065);
  Emulsion->AddElement(elBr,fractionmass=0.32190);
  Emulsion->AddElement(elI, fractionmass=0.01875);
  Emulsion->AddElement(elC, fractionmass=0.1012);
  Emulsion->AddElement(elO, fractionmass=0.0741);
  Emulsion->AddElement(elN, fractionmass=0.0268);
  Emulsion->AddElement(elH, fractionmass=0.0163);
  Emulsion->AddElement(elS, fractionmass=0.0003);

  // Vacuum
  //density = 1.290*g/cm3;

  // G4Material *vuoto  = new G4Material("Vacuum",z=1.,a=1.01*g/mole,
  //                        density=universe_mean_density,kStateGas,0.1*kelvin,
  //                        1.e-19*pascal); //the vacuum in the scattering chamber
  
  new G4Material("Galactic", z=1., a=1.01*g/mole,density= universe_mean_density,
		 kStateGas, 2.73*kelvin, 3.e-18*pascal);


// PMMA C5H8O2 ( Acrylic )
// -------------
//   ACRdensity = 1.19*g/cm3;
//   G4Material* Acrylic = new G4Material(name="Acrylic", ACRdensity, ncomponents=3);
//   Acrylic->AddElement(elC, 5);
//   Acrylic->AddElement(elH, 8);
//   Acrylic->AddElement(elO, 2);
  
  G4Material* TAC = new G4Material("TAC", density= 1.1919*g/cm3, ncomponents=3);
  // C6H7O2(OOCCH3)3
  // BASE (TAC TriAcetylCellulose)
  //    CAS No. : 9012-09-3
  //    MF      : C28 H38 O19
  //    Density : 1.1919 g/cm^2
  TAC->AddElement(elC, natoms=28); 
  TAC->AddElement(elH, natoms=38);
  TAC->AddElement(elO, natoms=19);

  G4Material* Polystyrene = new G4Material("Polystyrene", density= 1.050*g/cm3, ncomponents=2);
  Polystyrene->AddElement(elC, natoms=8); 
  Polystyrene->AddElement(elH, natoms=8);

  // Print materials
  G4cout << *(G4Material::GetMaterialTable()) << G4endl;
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

G4VPhysicalVolume* DetectorConstruction::ConstructDetector()
{

 
  // Geometry parameters

  //G4double emuThickness  = 0.5*cm;
  G4double baseThickness  = 175*um;
  G4double layerThickness = 50*um;
  G4double emuSizeX       = 24.15*cm;  
  G4double emuSizeY       = 24.15*cm;
  G4int nFilm             = 50;//50;  
  G4double filmThickness   = baseThickness+layerThickness*2;
  G4double detThickness   = filmThickness*nFilm;
    
  //dimensioni del mondo
  G4double worldSizeX = 10 *m;
  G4double worldSizeY = 10 *m;
  G4double worldSizeZ = 10 *m; 

  // Get materials
  G4Material* defaultMaterial = G4Material::GetMaterial("Galactic");           
  G4Material* emulsionMaterial = G4Material::GetMaterial("Emulsion");           
  //G4Material* neutralMaterial = G4Material::GetMaterial("G4_POLYCARBONATE");  
  G4Material* baseMaterial = G4Material::GetMaterial("Polystyrene");
  //G4Material* plateMaterial = G4Material::GetMaterial("Acrylic");           
  
  if ( ! defaultMaterial ) {
    G4ExceptionDescription msg;
    msg << "Cannot retrieve materials already defined."; 
    G4Exception("B4DetectorConstruction::DefineVolumes()",
      "MyCode0001", FatalException, msg);
  }  
   
  //     
  // World
  //
  G4VSolid* worldS 
    = new G4Box("World", worldSizeX/2, worldSizeY/2, worldSizeZ/2);                      
  G4LogicalVolume* worldLV
    = new G4LogicalVolume(worldS, defaultMaterial,"World");
                                   
  G4VPhysicalVolume* worldPV
    = new G4PVPlacement(0, G4ThreeVector(),worldLV,                         
                 "World", 0, false, 0, fCheckOverlaps); 
  
  //                               
  // Emulsion Detector
  //
  
  G4VSolid* detectorS 
    = new G4Box("Detector", emuSizeX/2, emuSizeY/2, detThickness/2);
                         
  G4LogicalVolume* detectorLV
    = new G4LogicalVolume(detectorS, defaultMaterial, "Detector"); 
                                   
  fDetectorPV
    = new G4PVPlacement(0, G4ThreeVector(0., 0.,0.),
                 detectorLV, "Detector", worldLV,  
		 false, 0, fCheckOverlaps); 
  //                               
  // Emulsion Film
  //
  
  G4VSolid* filmS 
    = new G4Box("Film", emuSizeX/2, emuSizeY/2, filmThickness/2);
  
  G4LogicalVolume* filmLV
    = new G4LogicalVolume(filmS,defaultMaterial, "Film");
  
  new G4PVReplica("Film", filmLV, detectorLV,
		  kZAxis, nFilm, filmThickness);

  //                               
  // Layers (Top & Bottom)
  //
 
   G4VSolid* emulsionS 
    = new G4Box("Emulsion", emuSizeX/2, emuSizeY/2, layerThickness/2);
                         
  G4LogicalVolume* emulsionLV
    = new G4LogicalVolume(emulsionS, emulsionMaterial, "Emulsion"); 
                                   
  fEmulsionTopPV
    = new G4PVPlacement(0, G4ThreeVector(0., 0.,-baseThickness/2-layerThickness/2),
                 emulsionLV, "Emulsion", filmLV,  
		 false, 0, fCheckOverlaps); 

  //fEmulsionBotPV
  // = new G4PVPlacement(0, G4ThreeVector(0., 0.,+baseThickness/2+layerThickness/2),
  //             emulsionLV, "Emulsion", filmLV,  
  //		 false, 0, fCheckOverlaps); 
  
  //                               
  // Plastic base
  //
 
   G4VSolid* baseS 
    = new G4Box("Base", emuSizeX/2, emuSizeY/2, baseThickness/2);
                         
  G4LogicalVolume* baseLV
    = new G4LogicalVolume(baseS, baseMaterial, "Base"); 
                                   
  fBasePV
    = new G4PVPlacement(0, G4ThreeVector(0., 0.,+layerThickness/2-layerThickness/2),
                 baseLV, "Base", filmLV,  
		 false, 0, fCheckOverlaps); 

  //                                        
  // Visualization attributes
  //
  worldLV->SetVisAttributes (G4VisAttributes::Invisible);
  
  G4VisAttributes* emulsionVisAtt= new G4VisAttributes();
  emulsionVisAtt->SetVisibility(true);
  emulsionVisAtt->SetColour(G4Colour::Blue());
  emulsionVisAtt->SetForceSolid(true);
  emulsionLV->SetVisAttributes(emulsionVisAtt);

  G4VisAttributes* baseVisAtt= new G4VisAttributes();
  baseVisAtt->SetVisibility(true);
  baseVisAtt->SetColour(G4Colour::White());
  baseVisAtt->SetForceSolid(true);
  baseLV->SetVisAttributes(baseVisAtt);
 
  return worldPV;

}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void DetectorConstruction::PrintDetectorParameters()
{
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
