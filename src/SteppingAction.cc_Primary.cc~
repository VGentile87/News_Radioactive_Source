#include "SteppingAction.hh"
#include "EventAction.hh"
#include "DetectorConstruction.hh"
#include "Analysis.hh"
#include "AnalysisManager.hh"
#include "PrimaryGeneratorAction.hh"
#include "G4SystemOfUnits.hh"
#include "G4Step.hh"
#include "G4Track.hh"
#include "G4StepPoint.hh"
#include "G4RunManager.hh"
#include "G4ThreeVector.hh" 
#include "G4VProcess.hh"
#include "G4ParticleGun.hh"
#include "G4GeneralParticleSource.hh"
#include <math.h>

#include "G4VParticleChange.hh"

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

SteppingAction::SteppingAction(
			       const DetectorConstruction* detectorConstruction,
			       EventAction* eventAction,
			       PrimaryGeneratorAction* primarygeneratorAction
			       			       )
  : G4UserSteppingAction(),
    fDetConstruction(detectorConstruction),
    fEventAction(eventAction),
    fGenAction(primarygeneratorAction)
{
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

SteppingAction::~SteppingAction()
{ 
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void SteppingAction::UserSteppingAction(const G4Step* step)
{
  
  //////    Collect energy and track length step by step
  
  /////      get volume of the current step   ///////////////////
  G4VPhysicalVolume* volume 
    = step->GetPreStepPoint()->GetTouchableHandle()->GetVolume();
  //////////////////////////////////////////////////////////////  

  /// Definizioni
  //G4double edep = step->GetTotalEnergyDeposit() / (keV);
  G4Track *track = step->GetTrack();
  G4String name = track->GetDefinition()->GetParticleName();
  G4double tracklength= track->GetTrackLength()/(um);
  G4double trackangle=0.;
  G4double neutron_angle=0;
  G4double angleout=0.;
  //G4double stepLength = 0.;
  G4double rangeout =0.;
  G4int charge = track->GetDefinition()->GetPDGCharge();
  G4int pdgcode = track->GetDefinition()->GetPDGEncoding();
  G4StepPoint* prePoint      = step->GetPreStepPoint();
  G4StepPoint* postPoint     = step->GetPostStepPoint();
  G4ThreeVector prePointPos  = prePoint->GetPosition() / (mm); 
  G4ThreeVector prePointPos2  = prePoint->GetPosition() / (mm);
  G4ThreeVector postPointPos = postPoint->GetPosition()/ (um);
  G4double kinene = prePoint->GetKineticEnergy() / (MeV);
  G4ThreeVector momvect = prePoint->GetMomentum() / (MeV);
  G4double tx = momvect.x()/momvect.z();
  G4double ty = momvect.y()/momvect.z();
  G4double mom = momvect.mag();
  const G4VProcess *proc = postPoint->GetProcessDefinedStep();
  G4String transportation = "Transportation";
  G4String scintillation = "Scintillation";
  G4String inelastic = "inelastic";
  G4String elastic = "hadElastic";
  G4String nCapture = "nCapture";
  G4int parentID = track->GetParentID();
  G4int trackID  = track->GetTrackID();
  G4int StepNo = step->GetTrack()->GetCurrentStepNumber();
  G4int whichEmu=0;
  
  G4String creator = "null";
  if(track->GetCreatorProcess() != 0) creator = track->GetCreatorProcess()->GetProcessName();

  /////   Numero evento  //////////////////////
  G4int eID = 0;
  const G4Event* evt = G4RunManager::GetRunManager()->GetCurrentEvent();
  if(evt) eID = evt->GetEventID();
  //G4cout << "Vale" << eID << G4endl;
  ////////////////////////////////////////
  G4double inel_ene=0.0;
  G4int inel_pdg=0;
  // G4String inel_proc=" ";

   
  /// Volume sensibile
  if (volume==fDetConstruction->GetEmulsionPV() ) {
    
    /// Primo hit neutroni

  
    /*  
    //if(name == "neutron" &&  StepNo==1 && parentID!=0){ // secondary neutrons  
    if(name == "neutron" &&  StepNo==1 && (eID==423)){ // secondary neutrons  
      G4cout << "NEUTRONS EVENT" << eID << G4endl;
      G4cout << " **** " << name << " " << proc->GetProcessName() << " EMU "<< whichEmu << " PDG " << pdgcode<< " STEP " << StepNo << " TRACKID " << trackID
      <<" PARENT " << parentID << " CREATOR " << creator  << " ENE " << kinene << " MOM " << mom << " " << G4endl;  
    }
    */

    //if (name == "neutron" &&  proc->GetProcessName() != transportation){
    if (name == "neutron" &&  StepNo==1 && parentID==0){       // analisi
      neutron_angle = atan2(momvect.y(),momvect.x());          
      fEventAction->NeutronAngle(neutron_angle); 
      if(proc->GetProcessName()==elastic) whichEmu = 1;
      if(proc->GetProcessName()==inelastic) whichEmu = 2;
      if(proc->GetProcessName()==nCapture) whichEmu = 3;
      fEventAction->EventInfoNeutron(whichEmu,kinene);  //nuova aggiunta per eliminare i neutroni che giÃ  hanno fatto diffusione

      
      /// Print info
      if(whichEmu==2 /*&& proc->GetProcessName() != transportation*/){   // inelastici
	//G4cout << " NAME  PROC PDG STEP TID PID X    Y    Z    KIN    P    TX    TY  " << G4endl;
	//G4cout << " " << name << " " << proc->GetProcessName() << " EMU "<< whichEmu << " " << pdgcode<< " " << StepNo << " " << trackID <<" " << parentID << " " << creator << " " <<  prePointPos.x() << " " << prePointPos.y() << " " << prePointPos.z() << " " << kinene << " " << mom << " " << tx << " " << ty <<  " " <<  momvect.x() << " " << momvect.y() << " " << momvect.z() << G4endl;
	
	inel_ene=kinene;
	inel_pdg=pdgcode;
      }   // end print info
      
      }     // end primo hit neutroni
    

    ///////////// VOLUME FIDUCIALE ////////////////////////////
    //Info primo hit fiducial volume
    if (StepNo==1 && name!= "e-" && charge != 0. && proc->GetProcessName() == transportation) {
      rangeout=-1;
      if(creator==inelastic)rangeout=8; 
      fEventAction->EventOut(rangeout,angleout);
    }
    ///////////////////////////////////////////////////////////
    
    /// Primo hit rinculi

    /*
    //rinculi prodotti da neutroni secondari
    if (creator!= "RadioactiveDecay" && StepNo==1 && name!= "e-" && name!="e+" && charge != 0. && parentID!=1){     
      G4cout << "Vale" << eID << G4endl;
      G4cout << " " << name << " " << proc->GetProcessName() << " EMU "<< whichEmu << " PDG " << pdgcode<< " STEP " << StepNo << " TRACKID " << trackID
	     <<" PARENT " << parentID << " CREATOR " << creator  << " ENE " << kinene << " MOM " << mom << " " << G4endl;  
    }  
    */

    //if (StepNo==1 && name!= "e-" && name!="e+" && charge != 0. && parentID==1){    // analisi sui primari  
    //if (StepNo==1 && name=="proton" && parentID!=1) {  // analisi sui protoni secondari
    //if (StepNo==1 && name!= "e-" && name!= "neutron" && name!= "gamma" && name!="proton" && parentID!=1){  //analisi sui secondari non protoni
    if (StepNo==1 && creator!= "RadioactiveDecay" && name!= "e-" && name!= "e+" && charge != 0. && parentID!=1){  //analisi sui secondari tutti
      
      trackangle=atan2(momvect.y(),momvect.x()); 
      //fEventAction->AddEmu(edep,stepLength);
      fEventAction->EventInfoRecoil(kinene,trackangle,&prePointPos,&momvect,pdgcode);
      
    }   // end primo hit rinculi
    
    
    if (StepNo==1 && parentID==1 && creator==inelastic){    // STUDIO INELASTICI
      inel_ene=kinene;
      inel_pdg=pdgcode;
      //inel_proc=proc->GetProcessName();
      
      G4AnalysisManager* analysisManager = G4AnalysisManager::Instance();
      //analysisManager->FillNtupleDColumn(2, 0, event_id);
      analysisManager->FillNtupleDColumn(2, 0, eID);
      analysisManager->FillNtupleDColumn(2, 1, trackID);
      analysisManager->FillNtupleDColumn(2, 2, inel_ene);
      analysisManager->FillNtupleDColumn(2, 3, inel_pdg);
      analysisManager->AddNtupleRow(2);   
    /// Print info
    //G4cout << " " << name << " " << proc->GetProcessName() << " " << pdgcode<< " " << StepNo << " " << trackID <<" " << parentID << " " << creator <<" " << prePointPos.x() << " " << prePointPos.y() << " " << prePointPos.z() << " " << kinene << " " << mom << " " << tx << " " << ty <<  momvect.x() << " " << momvect.y() << " " << momvect.z() << G4endl;      
    
    }    // end inelastici
   
    
    ///// VOLUME FIDUCIALE /////////////////
    /// Ultimo hit neutroni volume fiduciale  
    if (name=="neutron" && proc->GetProcessName() == transportation)  {
      rangeout=1;
      //fEventAction->EventOut(rangeout);
    }

    /// Ultimo hit rinculi volume fiduciale
    if (name!= "e-" && charge != 0. && proc->GetProcessName() == transportation) {
      rangeout=-5;
      angleout=atan(pow(pow(tx,2)+pow(ty,2),0.5));
      fEventAction->EventOut(rangeout,angleout);
    }
    ////////////////////////////////////////////////////
    
    /// Ultimo hit rinculi
    //if (name!= "e-" && name!="e+" && charge != 0. && parentID==1) {  // analisi su tutto
    //    if (name=="proton" && parentID!=1) {  // analisi sui protoni secondari
    // if (name!= "e-" && name!= "neutron" && name!= "gamma" && name!="proton" &&  parentID!=1){ // analisi sui secondari non protoni
    if (StepNo==1 && creator!= "RadioactiveDecay" && name!= "e-" && name!= "e+" && charge != 0. && parentID!=1){  //analisi sui secondari tutti
      
      G4bool contained= true;
      if(step->GetPreStepPoint()->GetStepStatus()  == fGeomBoundary)contained=false;   // fuoriescono dal volume
      
      fEventAction->EventOut(rangeout,angleout);                       //da rimettere
      fEventAction->GetTrackLengthRecoil(tracklength,&prePointPos2,contained);   //da rimettere
      
      /// Print info
      /*if(contained==false && whichEmu==2)G4cout << " NAME  PROC PDG STEP TID PID X    Y    Z    KIN    P    TX    TY  " << G4endl;
	G4cout << " " << name << " " << proc->GetProcessName() << " " << pdgcode<< " " << StepNo << " " << trackID <<" " << parentID << " " << creator << " " << prePointPos.x() << " " << prePointPos.y() << " " << prePointPos.z() << " " << kinene << " " << mom << " " << tx << " " << ty <<" " <<  momvect.x()<< " " << momvect.y()<< " " << momvect.z() << " "<<trackangle << " " << neutron_angle<<G4endl;*/
    
    }     // end ultimo hit rinculi    
    
  }       // end volume sensibile
  
}         // end user stepping action



//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
