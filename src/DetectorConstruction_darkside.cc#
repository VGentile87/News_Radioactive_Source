#include "DetectorConstruction.hh"
#include "DetectorMessenger.hh"

#include "G4Material.hh"
#include "G4NistManager.hh"

#include "G4Box.hh"
#include "G4Tubs.hh"
#include "G4LogicalVolume.hh"
#include "G4PVPlacement.hh"
#include "G4PVReplica.hh"

#include "G4GeometryManager.hh"
#include "G4PhysicalVolumeStore.hh"
#include "G4LogicalVolumeStore.hh"
#include "G4SolidStore.hh"

#include "G4VisAttributes.hh"
#include "G4Colour.hh"
#include "G4SystemOfUnits.hh"
#include "G4RunManager.hh"
#include "G4PhysicalConstants.hh"
#include "G4SubtractionSolid.hh"

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

DetectorConstruction::DetectorConstruction()
:G4VUserDetectorConstruction(),
 fDefaultMaterial(0), fCylMaterial(0),
 fSolidWorld(0),fLogicWorld(0),fPhysiWorld(0),
 fDetectorMessenger(0)
{

  // materials
  DefineMaterials();
  
  // create commands for interactive definition of the calorimeter
  fDetectorMessenger = new DetectorMessenger(this);
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

DetectorConstruction::~DetectorConstruction()
{ delete fDetectorMessenger;}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

G4VPhysicalVolume* DetectorConstruction::Construct()
{
  return ConstructDetector();
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void DetectorConstruction::DefineMaterials()
{ 

  //
  // Database Material
  //
  
  G4NistManager* nistManager = G4NistManager::Instance();
  nistManager->SetVerbose(1);
  nistManager->FindOrBuildMaterial("G4_POLYETHYLENE"); // plates 
  nistManager->FindOrBuildMaterial("G4_WATER");   // shielding
  nistManager->FindOrBuildMaterial("G4_POLYSTYRENE");  // base emulsion

  //
  // Material Properties
  //
  
  G4double a;  // mass of a mole;
  G4double z;  // z=mean number of protons;  
  G4double density;
  G4double fractionmass;
  G4String name, symbol; 
  G4int ncomponents /*,natoms*/;

  //
  // Emulsion Component  
  //
  
  a = 126.9*g/mole;
  G4Element* elI  = new G4Element(name="Iodium", symbol="I", z=53., a);
  
  a = 107.9*g/mole;
  G4Element* elAg  = new G4Element(name="Silver", symbol="Ag", z=47., a);

  a = 79.9*g/mole;
  G4Element* elBr  = new G4Element(name="Bromine", symbol="Br", z=35., a);
  
  a = 32.1*g/mole;
  G4Element* elS  = new G4Element(name="Sulphur", symbol="S", z=16., a);
  
  a = 16.00*g/mole;
  G4Element* elO  = new G4Element(name="Oxygen", symbol="O", z=8., a);

  a = 14.01*g/mole;
  G4Element* elN  = new G4Element(name="Nitrogen", symbol="N", z= 7., a);
  
  a = 12.00*g/mole;
  G4Element* elC  = new G4Element(name="Carbon", symbol="C", z= 6., a);

  a = 1.01*g/mole;
  G4Element* elH  = new G4Element(name="Hydrogen",symbol="H" , z= 1., a);

  //
  // NIT EMULSION MATERIAL
  //
  
  density = 3.43*g/cm3; // NIT Emulsion
  G4Material* Emulsion = new G4Material(name="Emulsion", density, ncomponents=8);

  //
  // Fraction Mass NIT
  //
  
  Emulsion->AddElement(elAg,fractionmass=0.44065);
  Emulsion->AddElement(elBr,fractionmass=0.32190);
  Emulsion->AddElement(elI, fractionmass=0.01875);
  Emulsion->AddElement(elC, fractionmass=0.1012);
  Emulsion->AddElement(elO, fractionmass=0.0741);
  Emulsion->AddElement(elN, fractionmass=0.0268);
  Emulsion->AddElement(elH, fractionmass=0.0163);
  Emulsion->AddElement(elS, fractionmass=0.0003);

  //
  // World Material
  //
  
  new G4Material("Galactic", z=1., a=1.01*g/mole,density= universe_mean_density,
		 kStateGas, 2.73*kelvin, 3.e-18*pascal);
 

// PMMA C5H8O2 ( Acrylic )
// -------------
//   ACRdensity = 1.19*g/cm3;
//   G4Material* Acrylic = new G4Material(name="Acrylic", ACRdensity, ncomponents=3);
//   Acrylic->AddElement(elC, 5);
//   Acrylic->AddElement(elH, 8);
//   Acrylic->AddElement(elO, 2);
  

// G4Material* Polystyrene = new G4Material("Polystyrene", density= 1.050*g/cm3, ncomponents=2);
//  Polystyrene->AddElement(elC, natoms=8); 
//  Polystyrene->AddElement(elH, natoms=8);

  // Print materials
  G4cout << *(G4Material::GetMaterialTable()) << G4endl;
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

G4VPhysicalVolume* DetectorConstruction::ConstructDetector()
{

  ///// Physical Parameters /////

  //
  // Get materials
  //
  
  G4Material* defaultMaterial = G4Material::GetMaterial("Galactic");           
  G4Material* emulsionMaterial = G4Material::GetMaterial("Emulsion");            
  G4Material* baseMaterial = G4Material::GetMaterial("G4_POLYSTYRENE");
  G4Material* waterMaterial = G4Material::GetMaterial("G4_WATER");
  G4Material* plateMaterial = G4Material::GetMaterial("G4_POLYETHYLENE");           
  

  if ( ! defaultMaterial ) {
    G4ExceptionDescription msg;
    msg << "Cannot retrieve materials already defined."; 
    G4Exception("B4DetectorConstruction::DefineVolumes()",
      "MyCode0001", FatalException, msg);
  }  

 
  /////  Geometrical Parameters /////

  //
  //Dimensioni del mondo
  //
  
  G4double worldSizeX = 10 *m;
  G4double worldSizeY = 10 *m;
  G4double worldSizeZ = 10 *m; 

  //
  // Detector
  //
  
  G4double baseThickness  = 175*um;
  G4double layerThickness = 50*um;
  G4double emuSizeX       = 27.6*cm;  
  G4double emuSizeY       = 18.5*cm;
  G4int nFilm             = 1;//50;
  G4double filmThickness   = baseThickness+layerThickness*2;
  G4double detThickness   = filmThickness*nFilm;

  //
  // Shielding
  //

  G4double boxX = 274.32*cm;
  G4double boxY = 274.32*cm;
  G4double boxZ = 294.64*cm;
  G4double boxThickness = 91.44*cm;
  G4double plateTopThickness = 1.905*cm;
  G4int NplatesTop = 32;
  G4double plateBotX = 304.8*cm;
  G4double plateBotY = 304.8*cm;
  G4double plateBotThickness = 10.16*cm;
  G4int NplatesBot = 6;
    
   
  //     
  // World
  //
  
  G4VSolid* worldS 
    = new G4Box("World", worldSizeX/2, worldSizeY/2, worldSizeZ/2);                      
  G4LogicalVolume* worldLV
    = new G4LogicalVolume(worldS, defaultMaterial,"World");
                                   
  G4VPhysicalVolume* worldPV
    = new G4PVPlacement(0, G4ThreeVector(),worldLV,                         
                 "World", 0, false, 0, fCheckOverlaps); 
  
  //                               
  // Emulsion Detector
  //
  
  G4VSolid* detectorS 
    = new G4Box("Detector", emuSizeX/2, emuSizeY/2, detThickness/2);
                         
  G4LogicalVolume* detectorLV
    = new G4LogicalVolume(detectorS, defaultMaterial, "Detector"); 
                                   
  fDetectorPV
    = new G4PVPlacement(0, G4ThreeVector(0., 0.,0.),
                 detectorLV, "Detector", worldLV,  
		 false, 0, fCheckOverlaps); 
  //                               
  // Emulsion Film
  //
  
  G4VSolid* filmS 
    = new G4Box("Film", emuSizeX/2, emuSizeY/2, filmThickness/2);
  
  G4LogicalVolume* filmLV
    = new G4LogicalVolume(filmS,defaultMaterial, "Film");
  
  new G4PVReplica("Film", filmLV, detectorLV,
		  kZAxis, nFilm, filmThickness);

  //                               
  // Layers
  //
 
   G4VSolid* emulsionS 
    = new G4Box("Emulsion", emuSizeX/2, emuSizeY/2, layerThickness/2);
                         
  G4LogicalVolume* emulsionLV
    = new G4LogicalVolume(emulsionS, emulsionMaterial, "Emulsion"); 
                                   
  fEmulsionTopPV
    = new G4PVPlacement(0, G4ThreeVector(0., 0.,-baseThickness/2-layerThickness/2),
                 emulsionLV, "Top Emulsion", filmLV,  
		 false, 0, fCheckOverlaps); 

  fEmulsionBotPV
    = new G4PVPlacement(0, G4ThreeVector(0., 0.,+baseThickness/2+layerThickness/2),
			emulsionLV, "Bottom Emulsion", filmLV,
			false, 0, fCheckOverlaps);

  //
  // Plastic base
  //
 
  G4VSolid* baseS 
    = new G4Box("Base Polystyrene", emuSizeX/2, emuSizeY/2, baseThickness/2);
  
  G4LogicalVolume* baseLV
    = new G4LogicalVolume(baseS, baseMaterial, "Base Polystyrene"); 
  
  fBasePV
    = new G4PVPlacement(0, G4ThreeVector(0., 0.,+layerThickness/2-layerThickness/2),
			baseLV, "Base Polystyrene", filmLV,false, 0, fCheckOverlaps);

       // begin shield 1
  //
  // Shielding Water
  //
  
  G4Box *outerBox = new G4Box("Outer Box",boxX/2.,boxY/2.,boxZ/2.);
  G4Box *innerBox = new G4Box("Inner Box",(boxX-2*boxThickness)/2.,(boxY-2*boxThickness)/2.,(boxZ+0.1*cm)/2.);
  G4SubtractionSolid *water_shielding = new G4SubtractionSolid("Water_Shielding",outerBox,innerBox);

  
  G4LogicalVolume* water_shieldingLV
    = new G4LogicalVolume(water_shielding,waterMaterial,"Water_Shielding"); 
  
  fWaterPV
    = new G4PVPlacement(0, G4ThreeVector(0., 0.,0.),
		        water_shieldingLV, "Water_Shielding", worldLV,false, 0, fCheckOverlaps);

  
  //                               
  // Shielding Top Polyethylene Plate 
  //
  
  G4VSolid* plateTop 
    = new G4Box("Top Polyethylene",(boxThickness)/2.,(boxThickness)/2.,((plateTopThickness)*NplatesTop)/2.);
                         
  G4LogicalVolume* plateTopLV
    = new G4LogicalVolume(plateTop, defaultMaterial, "Top Polyethylene"); 
                                   
  fplateTopPV
    = new G4PVPlacement(0, G4ThreeVector(0., 0.,boxZ/2.-(plateTopThickness*NplatesTop)/2.),
                 plateTopLV, "Top Polyethylene", worldLV,  
		 false, 0, fCheckOverlaps); 
                                 


  G4VSolid* top_plate 
    = new G4Box("Top Polyethylene",(boxThickness)/2.,(boxThickness)/2.,(plateTopThickness)/2.);

  G4LogicalVolume* top_shieldingLV
    = new G4LogicalVolume(top_plate,plateMaterial,"Top Polyethylene"); 

   new G4PVReplica("Top Plate", top_shieldingLV, plateTopLV,
		  kZAxis, NplatesTop, plateTopThickness);

  //                               
  // Shielding Bot Polysthirene Plate 
  //
  
  G4VSolid* plateBot 
    = new G4Box("Bottom Polyethylene",(plateBotX)/2.,(plateBotY)/2.,((plateBotThickness)*NplatesBot)/2.);
                         
  G4LogicalVolume* plateBotLV
    = new G4LogicalVolume(plateBot, defaultMaterial, "Bottom Polyethylene"); 
                                   
  fplateBotPV
    = new G4PVPlacement(0, G4ThreeVector(0., 0.,-boxZ/2-(plateBotThickness*NplatesBot)/2.),
                 plateBotLV, "Bottom Polyethylene", worldLV,  
		 false, 0, fCheckOverlaps); 
                               


  G4VSolid* bot_plate 
    = new G4Box("Bottom Poyethylene",(plateBotX)/2.,(plateBotY)/2.,(plateBotThickness)/2.);

  G4LogicalVolume* bot_shieldingLV
    = new G4LogicalVolume(bot_plate,plateMaterial,"Bottom Polyethylene"); 
  
   new G4PVReplica("Bottom Plate", bot_shieldingLV, plateBotLV,
		  kZAxis, NplatesBot, plateBotThickness);

     // end shield 1

   //
   // After Shielding
   //
   G4double dbox2 = 0.01*um;
   G4Box *outerBox2 = new G4Box("Outer Box2",(boxX-2*boxThickness)/2.,(boxY-2*boxThickness)/2.,(boxZ-(plateTopThickness)*NplatesTop)/2.);
   G4Box *innerBox2 = new G4Box("Inner Box2",(boxX-2*boxThickness-dbox2)/2.,(boxY-2*boxThickness-dbox2)/2.,(boxZ-(plateTopThickness)*NplatesTop-dbox2)/2.);
   G4SubtractionSolid *after_shielding = new G4SubtractionSolid("After_Shielding",outerBox2,innerBox2);

  
  G4LogicalVolume* after_shieldingLV
    = new G4LogicalVolume(after_shielding,defaultMaterial,"After_Shielding"); 
  
  fAfterShieldingPV
    = new G4PVPlacement(0, G4ThreeVector(0., 0.,-(plateBotThickness*NplatesBot)/2.),
		        after_shieldingLV, "After_Shielding", worldLV,false, 0, fCheckOverlaps);

  
  
   ///// Draw Experimental Setup /////
  
   //                                        
   // Visualization attributes
   //
   
   worldLV->SetVisAttributes (G4VisAttributes::Invisible);
   
   G4VisAttributes* emulsionVisAtt= new G4VisAttributes();
   emulsionVisAtt->SetVisibility(true);
   emulsionVisAtt->SetColour(G4Colour::Blue());
   emulsionVisAtt->SetForceSolid(true);
   emulsionLV->SetVisAttributes(emulsionVisAtt);
   after_shieldingLV->SetVisAttributes(emulsionVisAtt);
   
   G4VisAttributes* baseVisAtt= new G4VisAttributes();
   baseVisAtt->SetVisibility(true);
   baseVisAtt->SetColour(G4Colour::White());
   baseVisAtt->SetForceSolid(true);
   baseLV->SetVisAttributes(baseVisAtt);
   
    G4VisAttributes* shieldingWaterVisAtt= new G4VisAttributes();      //begin no shield 2
   shieldingWaterVisAtt->SetVisibility(true);
   shieldingWaterVisAtt->SetColour(G4Colour::Grey());
   water_shieldingLV->SetVisAttributes(shieldingWaterVisAtt);
   
   G4VisAttributes* shieldingPolyVisAtt= new G4VisAttributes();
   shieldingPolyVisAtt->SetVisibility(true);
   shieldingPolyVisAtt->SetColour(G4Colour::Cyan());
   top_shieldingLV->SetVisAttributes(shieldingPolyVisAtt);
   bot_shieldingLV->SetVisAttributes(shieldingPolyVisAtt);           // end no shield 2
   
   return worldPV;

}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void DetectorConstruction::PrintDetectorParameters()
{
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
